#!/usr/bin/env python
"""PySGF solutons to Project Euler Problems 101-150.

http://projecteuler.net/
Solutions presume Python 2.7.

"""

import re
import sys
import time
import urllib
import csv
from contextlib import closing

from data import *
from functions import *

def p101():
    """Project Euler Problem 101 solution.
    
    If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term,
    as there are infinitely many polynomial functions that can model the sequence.

    As an example, let us consider the sequence of cube numbers. This is defined by the generating function,
    u(n) = n^3: 1, 8, 27, 64, 125, 216, ...

    Suppose we were only given the first two terms of this sequence.
    Working on the principle that "simple is best" we should assume a linear relationship and predict the next term to be 15
    (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity,
    a quadratic relationship should be assumed.

    We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence.
    It should be clear that OP(k, n) will accurately generate the terms of the sequence for n <= k,
    and potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).

    As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n >= 2, OP(1, n) = u1.

    Hence we obtain the following OPs for the cubic sequence:
    OP(1, n) = 1 	    1, 1, 1, 1, ...
    OP(2, n) = 7n-6 	    1, 8, 15, ...
    OP(3, n) = 6n^2-11n+6   1, 8, 27, 58, ...
    OP(4, n) = n3 	    1, 8, 27, 64, 125, ...

    Clearly no BOPs exist for k >= 4.
    By considering the sum of FITs generated by the BOPs, we obtain 1 + 15 + 58 = 74.
    Consider the following tenth degree polynomial generating function:
    un = 1 - n + n^2 - n^3 + n^4 - n^5 + n^6 - n^7 + n^8 - n^9 + n^10
    Find the sum of FITs for the BOPs.
    
    """
    
    def __poly_eval(poly_coefs, xval):
        return sum(coef * xval ** index for (index, coef) in enumerate(poly_coefs))
        
    def __row_reduce(ini_op_vals, ini_sfun_vals, coef_index):
        op_vals = ini_op_vals
        sfun_vals = ini_sfun_vals
        row_index = 0
        for i in xrange(len(op_vals)):
            if i != coef_index:
                row_factor = op_vals[coef_index][coef_index]
                coef_factor = op_vals[i][coef_index]
                op_vals[i] = [x * row_factor - op_vals[coef_index][col_index] * coef_factor  for (col_index, x) in  enumerate(op_vals[i])]
                sfun_vals[i] =  sfun_vals[i] * row_factor - sfun_vals[coef_index] *  coef_factor
                del op_vals[i][coef_index]
                row_index += 1
        del op_vals[coef_index]
        del sfun_vals[coef_index]
        return op_vals, sfun_vals
    
    def _get_coef(op_vals, sfun_vals, coef_num):
        op_vals_red, sfun_vals_red = copy.deepcopy(op_vals), copy.deepcopy(sfun_vals)
        coef_index = coef_num
        while len(op_vals_red) > 1:
            if coef_index != 0:
                coef_to_eliminate = 0
                coef_index -= 1
            else:
                coef_to_eliminate = 1
            op_vals_red, sfun_vals_red = __row_reduce(op_vals_red, sfun_vals_red, coef_to_eliminate)
        coef_val = sfun_vals_red[0] / op_vals_red[0][0]
        return coef_val

    def __get_optimum_polynomial_coefficients(sfun_coefs, nval):
        op_vals = [[x ** n for n in xrange(nval)] for x in xrange(1, nval + 1)]
        sfun_vals = [__poly_eval(sfun_coefs, x) for x in  xrange(1, nval + 1)]
        op_coefs = [_get_coef(op_vals,  sfun_vals, n) for n in xrange(nval)]
        return op_coefs
    
    def __get_fip_value(sfun_coefs, nval):
        op_coefs = __get_optimum_polynomial_coefficients(sfun_coefs, nval)
        fip_val = __poly_eval(op_coefs, len(op_coefs) + 1)
        return fip_val

    sfun_coefs = [(-1) ** n for n in xrange(11)]
    fip_sum = sum(__get_fip_value(sfun_coefs, n) for n in xrange(1, len(sfun_coefs)))
    return fip_sum


def p102():
    """Project Euler Problem 102 solution.
    
    Three distinct points are plotted at random on a Cartesian plane, for which -1000 <= x, y <= 1000, such that a triangle is formed.
    Consider the following two triangles:
    A(-340,495), B(-153,-910), C(835,-947)
    X(-175,41), Y(-421,-714), Z(574,-645)
    It can be verified that triangle ABC contains the origin, whereas triangle XYZ does not.
    Using triangles.txt (right click and 'Save Link/Target As...'), a 27K text file containing the co-ordinates of one thousand "random" triangles,
    find the number of triangles for which the interior contains the origin.
    NOTE: The first two examples in the file represent the triangles in the example given above.
    
    """
    
    def __triangle_area(x1, y1, x2, y2, x3, y3):
        return abs((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3))
    
    def __does_triangle_contain_origin(x1, y1, x2, y2, x3, y3):
        """Triangle contains origin if sum of areas substituting points with origin equals initial triangle area."""
        area_ini = __triangle_area(x1, y1, x2, y2, x3, y3)
        area_total = __triangle_area(x1, y1, x2, y2, 0, 0) + __triangle_area(x1, y1, 0, 0, x3, y3) + __triangle_area(0, 0, x2, y2, x3, y3)
        return area_ini == area_total
    
    originated_triangle_count = 0
    triangle_reader = csv.reader(open('p102_triangles.txt', 'rb'), delimiter = ',', quotechar = '"')
    for coord_list in triangle_reader:
        clist = []
        for coord in coord_list:
            clist.append(int(coord))
        originated_triangle_count += 1 if apply(__does_triangle_contain_origin, clist) else 0
  
    return originated_triangle_count
    
    